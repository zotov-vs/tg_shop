import logging

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import CallbackQuery, InputFile

from keyboards.inline.catalog import catalog_cb

import data.localization as loc
from keyboards.inline.catalog import catalog_cb, get_catalog_keyboard
from keyboards.inline.order import get_order_keyboard
from loader import dp
from states.catalog import Waiting
from states.orders import OrderState
from utils.db_api.models.bills import Bill
from utils.payments import Payment
from utils.db_api.models.products import Product
from utils.db_api.models.orders import Order
from utils.db_api.models.orders_lines import OrderLine
from utils.db_api.models.promocodes import Promocode

cache_time = 1

@dp.message_handler(text=loc.menu_catalog)
async def products_list(message: types.Message):
    product = await Product.get()
    text = await product.get_caption()
    items_list = await product.get_children_list()
    keyboard = await get_catalog_keyboard(product=product, items_list=items_list)
    # photo = product.product_image
    photo = InputFile(f"./data/images/logo.jpg")

    await message.answer_photo(photo, caption=text, reply_markup=keyboard)


@dp.callback_query_handler(catalog_cb.filter(operation="list"))
async def products_list_edit(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=cache_time)
    logging.info(f"call = {callback_data}")

    product = await Product.get(int(callback_data.get('id')))
    text = await product.get_caption()
    items_list = await product.get_children_list()
    keyboard = await get_catalog_keyboard(product=product, items_list=items_list)

    await call.message.edit_caption(caption=text, reply_markup=keyboard)


@dp.callback_query_handler(catalog_cb.filter(operation="back"))
async def products_list_edit(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=cache_time)
    logging.info(f"call = {callback_data}")

    product = await Product.get(int(callback_data.get('parent_id')))
    text = await product.get_caption()
    items_list = await product.get_children_list()
    keyboard = await get_catalog_keyboard(product=product, items_list=items_list)

    await call.message.edit_caption(caption=text, reply_markup=keyboard)


@dp.callback_query_handler(catalog_cb.filter(operation="promocode"))
async def products_list_edit(call: CallbackQuery, callback_data: dict, state: FSMContext):
    await call.answer(cache_time=cache_time)
    logging.info(f"call = {callback_data}")
    await call.answer(f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥")

    await state.update_data(message_id=call.message.message_id, try_number=0)

    await Waiting.promocode.set()


@dp.message_handler(state=Waiting.promocode)
async def products_list(message: types.Message, state: FSMContext):
    promocode = await Promocode.get(message.text)
    if promocode:
        await message.answer(f"–û—Ö—Ä–µ–Ω–µ—Ç—å")
        await state.reset_state()
    else:
        data = await state.get_data()
        try_number = data.get("try_number")
        try_number += 1

        await state.update_data(try_number=try_number)

        if try_number == 1:
            await message.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ <code>{message.text.upper()}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –º–æ–∂–µ—Ç –æ–ø–µ—á–∞—Ç–∫–∞?")
        elif try_number == 2:
            await message.answer(f"–¢–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ <code>{message.text.upper()}</code> —Ç–æ–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω üòû")
        elif try_number == 3:
            await message.answer(f"–ò —Ç–∞–∫–æ–≥–æ <code>{message.text.upper()}</code> —Ç–æ–∂–µ –Ω–µ—Ç  üò¢. "
                                 f"–ó–∞–∫—Ä–∞–¥—ã–≤–∞—é—Ç—Å—è —Å–æ–º–Ω–µ–Ω–∏—è, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ üßê")
        elif try_number == 4:
            await message.answer(f"–ê –≤—ã –Ω–∞—Å—Ç–æ–π—á–∏–≤—ã üòâ, –Ω–æ —Å —ç—Ç–∏–º –∫–æ–¥–æ–º <code>{message.text.upper()}</code> —Ç–æ–∂–µ –Ω–µ—É–¥–∞—á–∞ üò¢")
        else:
            await message.answer(f"–ù—É –≤—Å–µ! –Ø —É—Å—Ç–∞–ª! –Ø —É—Ö–æ–∂—É. –¢–∞–∫–æ–≥–æ <code>{message.text.upper()}</code> —Ç–æ–∂–µ –Ω–µ—Ç ü§∑‚Äç‚ôÇÔ∏è\n"
                                 f"–≠—Ç–æ –±—ã–ª–∞ –ø–æ—Å–ª–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞."
                                 f"–•–æ—á–µ—à—å –ø–æ–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –µ—â–µ - –∂–º–∏ –∫–Ω–æ–ø–∫—É")

            await state.reset_state()


@dp.callback_query_handler(catalog_cb.filter(operation="add_to_order"))
async def products_list_edit(call: CallbackQuery, callback_data: dict, state: FSMContext):
    await call.answer(cache_time=cache_time)
    logging.info(f"call = {callback_data}")

    product = await Product.get(int(callback_data.get('id')))

    # 1. –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –ª–∏ –¥–æ–±–∞–≤–∏–º –≤ —Ç–µ–∫—É—â–∏–π
    order = await Order.get_or_add(tg_user=call.from_user)
    order = await order.add_product(product=product, price=product.product_price)
    order_text = await order.get_description()

    if OrderState.add_products.state:
        logging.info("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
    else:
        OrderState.add_products.set()
        logging.info("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")

    # –ü–æ–ª—É—á–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º –∑–∞–∫–∞–∑–æ–º
    state_data = await state.get_data()
    orders_message_id = state_data.get('orders_message_id')

    # 2. –í—ã–≤–æ–¥–∏–º –∑–∞–∫–∞–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = await get_order_keyboard(order=order)
    if orders_message_id:
        await call.bot.delete_message(chat_id=call.message.chat.id, message_id=orders_message_id)

    orders_message = await call.message.answer(order_text, reply_markup=keyboard)

    state_data.update(orders_message_id=orders_message.message_id)
    await state.update_data(data=state_data)




